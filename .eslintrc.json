{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "prettier"
  ],
  "plugins": [
    "@typescript-eslint",
    "react",
    "react-hooks",
    "jsx-a11y",
    "import",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser", // Use the TypeScript parser for ESLint
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "env": {
    "browser": true,
    "node": true,
    "es2021": true,
    "jest": true
  },
  "rules": {

    // General ESLint rules
    "no-console": "warn",
    "no-debugger": "error",
    "eqeqeq": ["warn", "always"],

    // TypeScript rules
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/explicit-function-return-type": "warn",
    "@typescript-eslint/no-unused-vars": ["warn", { "argsIgnorePattern": "^_" }],

    // React rules
    "react/prop-types": "off",  // If using TypeScript, prop types are handled by TypeScript
    "react/react-in-jsx-scope": "off",  // In Next.js, React import isn't necessary
    "react/jsx-uses-react": "off",  // In React 17+, JSX transform doesnâ€™t require React in scope
    "react/jsx-uses-vars": "error",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",

    // JSX accessibility rules
    "jsx-a11y/anchor-is-valid": "off",
    "jsx-a11y/alt-text": "warn",
    "jsx-a11y/no-onchange": "warn",

    // Import rules
    "import/no-unresolved": "error",
    "import/named": "error",
    "import/default": "error",
    "import/namespace": "error",
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }],
    "import/order": ["warn", { "groups": [["builtin", "external", "internal"]] }],

    // Prettier integration (disable conflicting rules)
    "prettier/prettier": "error",

    // Code quality and consistency
    "no-magic-numbers": "off",
    "consistent-return": "off",  // This rule is controversial, can be turned on if desired
    "no-shadow": "warn",  // To avoid variable shadowing
    "prefer-template": "warn",  // Enforce template literals over string concatenation
    "no-var": "warn",  // Encourage `let` and `const` over `var`

    // Code style
    "indent": ["warn", 2],
    "quotes": ["warn", "single"],
    "semi": ["warn", "always"],
    "max-len": ["warn", { "code": 120, "tabWidth": 2 }],
    "linebreak-style": ["warn", "unix"],

    // Other best practices
    "no-duplicate-imports": "warn",
    "array-callback-return": "warn",
    "no-undef": "warn",
    "prefer-arrow-callback": "warn",
    "no-return-await": "warn",

    "@typescript-eslint/ban-ts-comment": [
      "warn",
      { "ts-ignore": "allow-with-description", "ts-nocheck": "warn", "ts-check": "off" }
    ]
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
